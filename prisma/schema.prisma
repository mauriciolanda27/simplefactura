// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  password_hash String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  // Relations
  categories   Category[]
  rubros       Rubro[]
  invoices     Invoice[]
  exportHistory ExportHistory[]
  exportAnalytics ExportAnalytics[]
  userLogs     UserLog[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  invoices    Invoice[]
}

model Rubro {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("business") // "personal" | "business"
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  invoices    Invoice[]
}

model Invoice {
  id                 String   @id @default(cuid())
  authorization_code String
  name               String
  nit                String
  nit_ci_cex         String
  number_receipt     String
  purchase_date      DateTime
  total_amount       Float
  vendor             String
  categoryId         String
  category           Category @relation(fields: [categoryId], references: [id])
  rubroId            String
  rubro              Rubro    @relation(fields: [rubroId], references: [id])
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
  userId             String
}

model UserLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  action      String   // "CREATE_INVOICE", "EXPORT_PDF", "GENERATE_REPORT", etc.
  entity_type String?  // "Invoice", "Category", "Rubro"
  entity_id   String?  // ID of the affected record
  details     Json?    // Additional action details
  ip_address  String?
  user_agent  String?
  created_at  DateTime @default(now())
  
  @@index([userId, created_at])
  @@index([action])
  @@index([entity_type])
}

// New models for export tracking and analytics

model ExportHistory {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  export_type     String   // 'invoice' | 'report'
  format          String   // 'csv' | 'pdf'
  filename        String
  file_size       Int?     // Size in bytes
  filters         Json?    // Export filters used
  status          String   @default("completed") // 'completed' | 'failed' | 'cancelled'
  error_message   String?  // Error details if failed
  retry_count     Int      @default(0)
  download_count  Int      @default(1)
  created_at      DateTime @default(now())
  completed_at    DateTime?
  
  @@index([userId, created_at])
  @@index([export_type, format])
  @@index([status])
}

model ExportAnalytics {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  date            DateTime @default(now())
  export_type     String   // 'invoice' | 'report'
  format          String   // 'csv' | 'pdf'
  count           Int      @default(1)
  total_size      Int      @default(0) // Total size in bytes
  avg_file_size   Float    @default(0)
  success_rate    Float    @default(100) // Percentage of successful exports
  
  @@unique([userId, date, export_type, format])
  @@index([userId, date])
  @@index([export_type, format])
}
